
@misc{eventlet,
  title = {Eventlet},
  year = {2022},
  month = jun,
  journal = {Eventlet Networking Library},
  howpublished = {https://eventlet.net/},
  langid = {english}
}

@misc{libpcap,
  title = {Libpcap},
  year = {2022},
  month = jun,
  journal = {TCPDump \& Libpcap},
  howpublished = {https://www.tcpdump.org/},
  langid = {english}
}

@misc{opnet_benchmark,
  title = {{{OPNET SITL}} Benchmark},
  year = {2022},
  month = jun,
  howpublished = {https://github.com/ZacharyJia/OPNET-SITL-Benchmark},
  langid = {english}
}

@misc{ryu,
  title = {Ryu},
  year = {2022},
  month = jun,
  journal = {Ryu SDN Framework},
  howpublished = {https://ryu-sdn.org/},
  langid = {english}
}

@inproceedings{mininet,
  title = {A Network in a Laptop: {{Rapid}} Prototyping for Software-Defined Networks},
  booktitle = {Proceedings of the 9th {{ACM SIGCOMM}} Workshop on Hot Topics in Networks},
  author = {Lantz, Bob and Heller, Brandon and McKeown, Nick},
  year = {2010},
  series = {Hotnets-{{IX}}},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1868447.1868466},
  abstract = {Mininet is a system for rapidly prototyping large networks on the constrained resources of a single laptop. The lightweight approach of using OS-level virtualization features, including processes and network namespaces, allows it to scale to hundreds of nodes. Experiences with our initial implementation suggest that the ability to run, poke, and debug in real time represents a qualitative change in workflow. We share supporting case studies culled from over 100 users, at 18 institutions, who have developed Software-Defined Networks (SDN). Ultimately, we think the greatest value of Mininet will be supporting collaborative network research, by enabling self-contained SDN prototypes which anyone with a PC can download, run, evaluate, explore, tweak, and build upon.},
  articleno = {19},
  isbn = {978-1-4503-0409-2},
  keywords = {emulation,open-flow,rapid prototyping,software defined networking,virtualization}
}

@article{7464256,
  title = {{{SDN-SPS}}: {{Semi-physical}} Simulation for Software-Defined Networks},
  author = {Hu, Long and Wang, Junfeng and Song, Enmin and Ksentini, Adlen and Hossain, Mu{\d h}ammad Anwar and Rawashdeh, Majdi},
  year = {2016},
  journal = {IEEE Sensors Journal},
  volume = {16},
  number = {20},
  pages = {7355--7363},
  doi = {10.1109/JSEN.2016.2561969}
}

@phdthesis{hyden_time_2003,
  title = {Time Dilation: {{Decreasing}} Time to Decision with Discrete -Event Simulation},
  author = {Hyden, Paul D.},
  year = {2003},
  journal = {ProQuest Dissertations and Theses},
  abstract = {Time dilation is proposed as a general method for selecting the best performing system from a discrete search space. As proposed by Schruben (1997), time dilation describes a method for managing the simultaneous execution of discrete event simulation models. Instead of fixing the time scale across all concurrently executing models, Schruben contracts the time scales of the most interesting models and dilates the time scales of less interesting models. The net result is that more computer time is spent simulating interesting models, improving decision making in the process. In this work, this concept is motivated and developed in depth, and its effectiveness is demonstrated in realistic simulation experiments. Several of the key computations have changed and the overall mechanism for implementation is completely new. Before giving the details of the fundamental time dilation algorithm, several background issues are discussed. A broad survey of the simulation optimization literature is provided. Further discussion establishes concretely why some models should receive more simulation work and how time dilation can satisfy those needs. A tool for measuring the basic experimental unit of simulation work, extended event graphs, is introduced. Additionally, extended event graphs enable techniques for reducing memory requirements that may be strained by simultaneous execution of multiple models. Time dilation and its attendant key issues are discussed and a general algorithm is presented. Implementations of time dilation for two examples and computational evidence showing significant improvements of time dilation over current approaches are presented.},
  isbn = {978-0-493-96094-4},
  langid = {english},
  keywords = {0796:Operations research,Applied sciences,Decision-making,Discrete-event simulation,Operations research,Time dilation},
  file = {C\:\\Users\\jia19\\Zotero\\storage\\9G86A5EQ\\Hyden - 2003 - Time dilation Decreasing time to decision with di.pdf}
}

@inproceedings{lee_performance_2019,
  title = {Performance {{Comparison}} of {{Software Defined Networking Simulators}} for {{Tactical Network}}: {{Mininet}} vs. {{OPNET}}},
  shorttitle = {Performance {{Comparison}} of {{Software Defined Networking Simulators}} for {{Tactical Network}}},
  booktitle = {2019 {{International Conference}} on {{Computing}}, {{Networking}} and {{Communications}} ({{ICNC}})},
  author = {Lee, Seungwoon and Ali, Jehad and Roh, Byeong-hee},
  year = {2019},
  month = feb,
  pages = {197--202},
  publisher = {{IEEE}},
  address = {{Honolulu, HI, USA}},
  doi = {10.1109/ICCNC.2019.8685572},
  abstract = {Software Defined Networking (SDN) has revolutionized the networking industry and also tactical communication due to its flexibility, innovation, and ease of programmability. However, modeling, evaluation, and testing of SDN based applications present several challenges. Mininet simulator has been developed for the study of SDN and used for SDN simulation in general. Although it is possible to prototype virtual SDN networks fast with Mininet, it is not for stress testing to validate the stability and reliability and simulation suitable for the real environment. The state-of-the-art network simulation tool OPNET recently OPNET has introduced the SDN Model, which can be used with a system in the loop (SITL). However, there is no research published yet which shows the use of OPNET for SDN. This paper rigorously compares the OPNET and Mininet for SDN experiments. we compare end-to-end delay, jitter, and RTT between controllers and switches. As a result, the Mininet environment cannot apply the network load, so it is desirable to use OPNET for simulation of the real environment or for the stability and reliability test.},
  isbn = {978-1-5386-9223-3},
  langid = {english},
  file = {C\:\\Users\\jia19\\Zotero\\storage\\V6LPED72\\Lee 等。 - 2019 - Performance Comparison of Software Defined Network.pdf}
}

@inproceedings{vanleeuwen_simulated_2009,
  title = {Simulated, Emulated, and Physical Investigative Analysis ({{SEPIA}}) of Networked Systems},
  booktitle = {{{MILCOM}} 2009 - 2009 {{IEEE}} Military Communications Conference},
  author = {Van Leeuwen, Brian and Burton, David and Onunkwo, Uzoma and McDonald, Michael},
  year = {2009},
  pages = {1--7},
  doi = {10.1109/MILCOM.2009.5380118},
  file = {C\:\\Users\\jia19\\Zotero\\storage\\CKGYWPI3\\Van Leeuwen 等。 - 2009 - Simulated, emulated, and physical investigative an.pdf;C\:\\Users\\jia19\\Zotero\\storage\\NCFNA7YC\\Van Leeuwen 等。 - 2009 - Simulated, emulated, and physical investigative an.pdf}
}

@article{estinet,
  title = {{{EstiNet}} Openflow Network Simulator and Emulator},
  author = {{Shie-Yuan Wang} and {Chih-Liang Chou} and {Chun-Ming Yang}},
  year = {2013},
  month = sep,
  journal = {IEEE Communications Magazine},
  volume = {51},
  number = {9},
  pages = {110--117},
  issn = {0163-6804},
  doi = {10.1109/MCOM.2013.6588659},
  abstract = {In this article, we introduce the EstiNet OpenFlow network simulator and emulator, and present its support for testing the functions and evaluating the performances of software-defined networks' OpenFlow controller's application programs. EstiNet uses an unique kernel reentering simulation methodology to enable unmodified real applications to run on nodes in its simulated network. As a result, without any modification, real NOX/POX or Floodlight OpenFlow controllers can readily run on a host in an EstiNet simulated network to control thousands of simulated OpenFlow switches. EstiNet has the characteristics of a simulator and an emulator at the same time. It combines the advantages of the simulation and emulation approaches without their respective shortcomings. EstiNet uses real OpenFlow controller programs, real network application programs, and the real TCP/IP protocol stack in the Linux kernel to generate correct, accurate, and repeatable SDN application performance results. In this article, we compare EstiNet with ns-3 and Mininet regarding their capabilities, performance, and scalability.},
  langid = {english},
  file = {C\:\\Users\\jia19\\Zotero\\storage\\WUI3S7UX\\Shie-Yuan Wang 等。 - 2013 - EstiNet openflow network simulator and emulator.pdf}
}

@inproceedings{maxinet,
  title = {{{MaxiNet}}: {{Distributed}} Emulation of Software-Defined Networks},
  booktitle = {2014 {{IFIP}} Networking Conference},
  author = {Wette, Philip and Dr{\"a}xler, Martin and Schwabe, Arne and Wallaschek, Felix and Zahraee, Mohammad Hassan and Karl, Holger},
  year = {2014},
  pages = {1--9},
  doi = {10.1109/IFIPNetworking.2014.6857078},
  file = {C\:\\Users\\jia19\\Zotero\\storage\\9DZZ8AFY\\Wette 等。 - 2014 - MaxiNet Distributed emulation of software-defined.pdf}
}


@article{Pearson:2017,
  	url = {http://adsabs.harvard.edu/abs/2017arXiv170304627P},
  	Archiveprefix = {arXiv},
  	Author = {{Pearson}, S. and {Price-Whelan}, A.~M. and {Johnston}, K.~V.},
  	Eprint = {1703.04627},
  	Journal = {ArXiv e-prints},
  	Keywords = {Astrophysics - Astrophysics of Galaxies},
  	Month = mar,
  	Title = {{Gaps in Globular Cluster Streams: Pal 5 and the Galactic Bar}},
  	Year = 2017
}


@techreport{jia_opsdn_2022,
  title = {{{OPSDN}}: An Enhanced {{SDN}} Simulation Framework for {{OPNET Modeler}}},
  author = {Jia, Zequn and Sun, Yantao and Liu, Qiang},
  year = {2022},
  url = {https://github.com/ZacharyJia/opsdn/blob/master/opsdn-technical-report.pdf}
}
